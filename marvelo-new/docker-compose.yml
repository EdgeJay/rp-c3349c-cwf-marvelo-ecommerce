version: "3"

x-aws-vpc: ${AWS_VPC}
x-aws-cluster: ${AWS_ECS_CLUSTER}
x-aws-loadbalancer: ${AWS_ELB}

services:
  server:
    image: ${SERVER_IMAGE_URI:-marvelo-server}:${IMAGE_TAG:-latest}
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - target: 1337
        published: 1337
        protocol: tcp
        x-aws-protocol: http
    healthcheck:
      test: curl --fail http://localhost:1337 || exit 1
      interval: 1m
      timeout: 30s
      retries: 3
      start_period: 2m
    environment:
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 1337
      DATABASE_CLIENT: postgres
      DATABASE_NAME: ${POSTGRES_DB:-strapi}
      DATABASE_HOST: ${POSTGRES_HOST:-database}
      DATABASE_PORT: ${POSTGRES_PORT:-5432}
      DATABASE_USERNAME: ${POSTGRES_USER:-strapi}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-strapi}
      DEV_ADMIN_ALLOW: "true"
      UPLOAD_AWS_ACCESS_KEY_ID: ${UPLOAD_AWS_ACCESS_KEY_ID}
      UPLOAD_AWS_ACCESS_SECRET: ${UPLOAD_AWS_ACCESS_SECRET}
      UPLOAD_AWS_REGION: ${UPLOAD_AWS_REGION}
      UPLOAD_AWS_S3_BUCKET: ${UPLOAD_AWS_S3_BUCKET}
    deploy:
      x-aws-autoscaling:
        min: 1
        max: 2
        cpu: 75
  frontend:
    image: ${FRONTEND_IMAGE_URI:-marvelo-frontend}:${IMAGE_TAG:-latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - target: 80
        published: 80
        protocol: tcp
        x-aws-protocol: http
    healthcheck:
      test: curl --fail http://localhost/api/healthcheck || exit 1
      interval: 1m
      timeout: 30s
      retries: 3
      start_period: 2m
    depends_on:
      - server
    deploy:
      resources:
        limits:
          memory: 4Gb
      x-aws-autoscaling:
        min: 1
        max: 2
        cpu: 75
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_STRAPI_API_URL: ${NEXT_PUBLIC_STRAPI_API_URL:-http://server:1337}
      NEXT_PUBLIC_STRAPI_UPLOADS_URL: ${NEXT_PUBLIC_STRAPI_UPLOADS_URL:-http://localhost}

x-aws-cloudformation:
  Resources:
    FrontendTCP80TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 120
        HealthCheckTimeoutSeconds: 60
        HealthCheckPath: /api/healthcheck
        Matcher:
          HttpCode: 200-499
    FrontendService:
      Type: AWS::ECS::Service
      Properties:
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - Ref: DefaultNetwork
            Subnets:
              # Assign to private subnets
              - subnet-0d8df6521a605d319
              - subnet-0ef1374999b6ec91d
    ServerService:
      Type: AWS::ECS::Service
      Properties:
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - Ref: DefaultNetwork
            Subnets:
              # Assign to private subnets
              - subnet-0d8df6521a605d319
              - subnet-0ef1374999b6ec91d
        
# Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# This file is licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License. A copy of
# the License is located at
#
# http://aws.amazon.com/apache2.0/
#
# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

Parameters:
  BranchName:
    Description: GitHub branch name
    Type: String
    Default: master
  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: rp-c3349c-cwf-marvelo-ecommerce
  GitHubOwner:
    Type: String
    Default: EdgeJay
  ProductsBucketName:
    Type: String
    Default: marvelo-product-images

Resources:
  MarveloServerEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'marvelo_server'
  MarveloFrontendEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'marvelo_frontend'
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - "-"
        - - !Sub "${AWS::StackName}"
          - "s3-artifact-store"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  # Policies
  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CodePipelineArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false
  
  # IAM policy for pipeline
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:GetRepository'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'

  # IAM role and policy for image build
  ImageBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"

  ImageBuildRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ImageBuildRoleDefaultPolicy
      Roles:
        - Ref: ImageBuildRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - cloudformation:DescribeStacks
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:cloudformation:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :stack/marvelo-*
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":secretsmanager:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :secret:MarveloDBSecret
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":secretsmanager:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :secret:MarveloS3Access
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":secretsmanager:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :secret:MarveloDockerLogin
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":logs:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :log-group:/aws/codebuild/
                    - Ref: ImageBuild
                    - :*
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutObject*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - CodePipelineArtifactStoreBucket
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CodePipelineArtifactStoreBucket
                        - Arn
                    - /*
          - Action:
              - ecr:GetAuthorizationToken
              - elasticloadbalancing:DescribeLoadBalancers
            Effect: Allow
            Resource:
              - "*"
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:CompleteLayerUpload
              - ecr:InitiateLayerUpload
              - ecr:PutImage
              - ecr:UploadLayerPart
            Effect: Allow
            Resource:
              - !GetAtt MarveloServerEcr.Arn
              - !GetAtt MarveloFrontendEcr.Arn
  
  # IAM role and policy for extract build
  ExtractBuildRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"

  ExtractBuildRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ExtractBuildRoleDefaultPolicy
      Roles:
        - Ref: ExtractBuildRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - servicediscovery:*
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:servicediscovery"
                    - ":"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :*
          - Action:
              - application-autoscaling:*
              - cloudformation:*
              - cloudwatch:*
              - ec2:*
              - ecs:*
              - elasticloadbalancing:*
              - ecr:*
              - iam:GetRole
              - iam:PassRole
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRolePolicy
              - iam:AttachRolePolicy
              - iam:PutRolePolicy
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
              - iam:ListRoleTags
              - iam:TagRole
              - iam:UntagRole
              - iam:CreateServiceLinkedRole
              - ssm:GetParameters
              - secretsmanager:GetSecretValue
              - route53:*
            Effect: Allow
            Resource: '*'
          - Action:
              - logs:CreateLogGroup
              - logs:DeleteLogGroup
              - logs:CreateLogStream
              - logs:DeleteLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":logs:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :log-group:/aws/codebuild/
                    - Ref: ExtractBuild
                    - :*
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":logs:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :log-group:/docker-compose/marvelo-new:*
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutObject*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - CodePipelineArtifactStoreBucket
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CodePipelineArtifactStoreBucket
                        - Arn
                    - /*

  # CodeBuild to Build the Container Image
  ImageBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join
        - "-"
        - - !Sub ${AWS::StackName}
          - "image-build"
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: POSTGRES_DB
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbName}}'
          - Name: POSTGRES_USER
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbUsername}}'
          - Name: POSTGRES_PASSWORD
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbPassword}}'
          - Name: UPLOAD_AWS_ACCESS_KEY_ID
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloS3Access:SecretString:accessKeyId}}'
          - Name: UPLOAD_AWS_ACCESS_SECRET
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloS3Access:SecretString:secretAccessKey}}'
          - Name: UPLOAD_AWS_REGION
            Type: PLAINTEXT
            Value: !Ref AWS::Region
          - Name: UPLOAD_AWS_S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref ProductsBucketName
          - Name: DOCKER_USERNAME
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDockerLogin:SecretString:dockerUsername}}'
          - Name: DOCKER_PASSWORD
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDockerLogin:SecretString:dockerPassword}}'
      ServiceRole: !Ref ImageBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Retrieving DB host and port...
                - export POSTGRES_HOST=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" --output text)
                - export POSTGRES_PORT=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='DBPort'].OutputValue" --output text)
                - export NEXT_PUBLIC_STRAPI_UPLOADS_URL=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='MarveloProductsBucketURL'].OutputValue" --output text)
                - echo $POSTGRES_HOST
                - echo $POSTGRES_PORT
                - echo $NEXT_PUBLIC_STRAPI_UPLOADS_URL
                - echo $UPLOAD_AWS_REGION
                - echo $UPLOAD_AWS_S3_BUCKET
                - echo Logging in to Docker...
                - echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin
            build:
              commands:
                - echo Building the Docker image...
                - cd marvelo-new/
                - docker-compose build
            post_build:
              commands:
                - echo Listing Docker images...
                - docker images
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo Pushing Docker images to ECR...
                - docker push $SERVER_IMAGE_URI:$IMAGE_TAG
                - docker push $FRONTEND_IMAGE_URI:$IMAGE_TAG
  
  # CodeBuild to generate CloudFormation template
  ExtractBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join
        - "-"
        - - !Sub ${AWS::StackName}
          - "extract-build"
      Artifacts:
        Type: CODEPIPELINE
        EncryptionDisabled: false
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: POSTGRES_DB
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbName}}'
          - Name: POSTGRES_USER
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbUsername}}'
          - Name: POSTGRES_PASSWORD
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbPassword}}'
          - Name: UPLOAD_AWS_ACCESS_KEY_ID
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloS3Access:SecretString:accessKeyId}}'
          - Name: UPLOAD_AWS_ACCESS_SECRET
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:MarveloS3Access:SecretString:secretAccessKey}}'
          - Name: UPLOAD_AWS_REGION
            Type: PLAINTEXT
            Value: !Ref AWS::Region
          - Name: UPLOAD_AWS_S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref ProductsBucketName
      ServiceRole: !Ref ExtractBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - mv /usr/local/bin/docker /usr/bin/docker
                - curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo Creating Docker Compose Context
                - curl "http://169.254.170.2${AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}" > creds.json
                - export AWS_ACCESS_KEY_ID=$(cat creds.json | jq -r .AccessKeyId)
                - export AWS_SECRET_ACCESS_KEY=$(cat creds.json | jq -r .SecretAccessKey)
                - export AWS_SESSION_TOKEN=$(cat creds.json | jq -r .Token)
                - export AWS_VPC=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='VpcId'].OutputValue" --output text)
                - export AWS_ECS_CLUSTER=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text)
                - export AWS_ELB=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='LoadbalancerId'].OutputValue" --output text)
                - echo "AWS_VPC=$AWS_VPC"
                - echo "AWS_ECS_CLUSTER=$AWS_ECS_CLUSTER"
                - echo "AWS_ELB=$AWS_ELB"
                - export NEXT_PUBLIC_STRAPI_UPLOADS_URL=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='MarveloProductsBucketURL'].OutputValue" --output text)
                - echo "NEXT_PUBLIC_STRAPI_UPLOADS_URL=$NEXT_PUBLIC_STRAPI_UPLOADS_URL"
                - echo Retrieving DB host and port...
                - export POSTGRES_HOST=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" --output text)
                - export POSTGRES_PORT=$(aws cloudformation describe-stacks --stack-name marvelo-infrastructure --query "Stacks[0].Outputs[?OutputKey=='DBPort'].OutputValue" --output text)
                - echo $POSTGRES_HOST
                - echo $POSTGRES_PORT
                - echo $UPLOAD_AWS_REGION
                - echo $UPLOAD_AWS_S3_BUCKET
                - docker context create ecs marveloecs --from-env
                - docker context use marveloecs
            build:
              commands:
                - cd marvelo-new
                - echo Convert Compose File
                - docker context ls
                - docker context inspect marveloecs
                - docker --debug compose convert > cloudformation.yml
                - ls -al
          artifacts:
            files:
              - ./marvelo-new/cloudformation.yml

  # Webhook to receive changes from GitHub
  AppPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: '{{resolve:secretsmanager:MarveloGitHubSecret:SecretString:token}}'
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref AppPipeline
      TargetAction: SourceAction
      Name: AppPipelineWebhookv2
      TargetPipelineVersion: !GetAtt 
        - AppPipeline
        - Version
      RegisterWithThirdParty: true
  
  # CI/CD pipeline
  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: marvelo-pipeline
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:MarveloGitHubSecret:SecretString:accessToken}}'
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildContainerImage
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: ImageBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ImageBuild
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "AWS_ACCOUNT_ID",
                      "value": "${AWS::AccountId}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "SERVER_IMAGE_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MarveloServerEcr}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "FRONTEND_IMAGE_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MarveloFrontendEcr}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "IMAGE_TAG",
                      "value": "#{codepipeline.PipelineExecutionId}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "POSTGRES_PASSWORD",
                      "value": "{{resolve:ssm:MarveloDBPassword}}",
                      "type": "PLAINTEXT"
                    }
                  ]
              RunOrder: 1
        - Name: Compose2Cloudformation
          Actions:
            - Name: ExtractCFN
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref ExtractBuild
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "AWS_ACCOUNT_ID",
                      "value": "${AWS::AccountId}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "SERVER_IMAGE_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MarveloServerEcr}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "FRONTEND_IMAGE_URI",
                      "value": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MarveloFrontendEcr}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "IMAGE_TAG",
                      "value": "#{codepipeline.PipelineExecutionId}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "POSTGRES_PASSWORD",
                      "value": "{{resolve:ssm:MarveloDBPassword}}",
                      "type": "PLAINTEXT"
                    }
                  ]
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: ExtractedCfn
        - Name: DeployStage
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: ExtractedCfn
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt [ExtractBuildRole, Arn]
                StackName: !Sub "${AWS::StackName}-application"
                ChangeSetName: !Sub "${AWS::StackName}-application-change-set"
                TemplatePath: "ExtractedCfn::marvelo-new/cloudformation.yml"
                Capabilities: CAPABILITY_IAM
              RunOrder: 1
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              RunOrder: 2
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub "${AWS::StackName}-application"
                ChangeSetName: !Sub "${AWS::StackName}-application-change-set"
                RoleArn: !GetAtt [ExtractBuildRole, Arn]
              RunOrder: 3
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket

Outputs:
  MarveloServerEcr:
    Description: Location of ECR Repository storing Marvelo Server Image
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MarveloServerEcr}"
  MarveloServerEcrName:
    Description: ECR Repository to store Marvelo Server Image
    Value: !Ref MarveloServerEcr
  MarveloFrontendEcr:
    Description: Location of ECR Repository storing Marvelo Frontend Image
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MarveloFrontendEcr}"
  MarveloFrontendEcrName:
    Description: ECR Repository to store Marvelo Frontend Image
    Value: !Ref MarveloFrontendEcr
  S3BucketName:
    Description: S3 Bucket to store Application Source Code
    Value: !Ref CodePipelineArtifactStoreBucket
AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster in a new VPC

Parameters:
  VpcCidr:
    Description: CIDR Range for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/(16|24))
  PublicSubnetOneCidr:
    Description: CIDR Range for public subnet one
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)
  PublicSubnetTwoCidr:
    Description: CIDR Range for public subnet two
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)
  PrivateSubnetOneCidr:
    Description: CIDR Range for private subnet one
    Type: String
    Default: 10.0.3.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)
  PrivateSubnetTwoCidr:
    Description: CIDR Range for private subnet two
    Type: String
    Default: 10.0.4.0/24
    AllowedPattern: ([0-9]{1,3}\.){3}[0-9]{1,3}($|/24)

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: 'marvelo-vpc'
  
  # Public subnets
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PublicSubnetOneCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'marvelo-subnet-public1'
        - Key: subnet-type
          Value: 'Public'

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PublicSubnetTwoCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'marvelo-subnet-public2'
        - Key: subnet-type
          Value: 'Public'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'marvelo-public-routetable'

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetTwo
  
  # IGW, NAT
  PublicInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: 'marvelo-igw'

  PublicInternetGatewayAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'PublicInternetGateway'

  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: PublicInternetGateway

  PublicEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: 'marvelo-nat-eip'

  PublicNatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - PublicEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetOne
      Tags:
        - Key: Name
          Value: 'marvelo-nat'
  
  # Private subnets
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PrivateSubnetOneCidr
      Tags:
        - Key: Name
          Value: 'marvelo-subnet-private1'
        - Key: subnet-type
          Value: 'Private'

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PrivateSubnetTwoCidr
      Tags:
        - Key: Name
          Value: 'marvelo-subnet-private2'
        - Key: subnet-type
          Value: 'Private'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'marvelo-private-routetable'

  PrivateSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: PublicNatGW

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetOne

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetTwo

  # Security Group for frontend and backend
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to frontend and backend applications from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 1337
          ToPort: 1337
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'marvelo-asg-web'

  # Security Group for database
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Postgres DB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'marvelo-asg-db'

  # Application Load Balancer
  WebLoadbalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: 'marvelo-alb-web'
      Type: "application"
      Scheme: "internet-facing"
      SecurityGroups: 
        - !Ref WebSecurityGroup
      Subnets: 
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'marvelo-cluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 2

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  
  # Subnet group for Postgres DB
  MarveloDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: marvelo-db-subnet-group
      DBSubnetGroupDescription: Subnet group for Marvelo DB
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  # RDS Postgres DB
  MarveloDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: marvelodb
      DBInstanceClass: db.t3.micro
      DBName: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbName}}'
      MasterUsername: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbUsername}}'
      MasterUserPassword: '{{resolve:secretsmanager:MarveloDBSecret:SecretString:dbPassword}}'
      AllocatedStorage: '20'
      Engine: 'postgres'
      StorageEncrypted: true
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref MarveloDBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      Tags:
        - Key: Name
          Value: 'marvelo-db'

# These output values will be available to service templates to use.
Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
  LoadbalancerId:
    Description: Application Loadbalancer Arn
    Value: !Ref 'WebLoadbalancer'
  LoadbalancerEndpoint:
    Description: Application Loadbalancer Endpoint
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt 'WebLoadbalancer.DNSName'
  DBEndpoint:
    Description: Postgres DB endpoint address
    Value: !GetAtt 'MarveloDB.Endpoint.Address'
  DBPort:
    Description: Postgres DB port
    Value: !GetAtt 'MarveloDB.Endpoint.Port'